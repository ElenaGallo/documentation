# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017-2020, Open Source Geospatial Foundation, CC-SA
# This file is distributed under the same license as the GeoNode package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GeoNode 3.2.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-06-03 17:10+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../../admin/async/index.rst:2 5f0c70e483624bf0b25d9835bbc2dc91
msgid "Supervisord and Systemd"
msgstr ""

#: ../../admin/async/index.rst:5 b587f630ec7f47c7975a1ad94418d7fc
msgid "Celery"
msgstr ""

#: ../../admin/async/index.rst:8 ad091dac227e40ff9cad163596f2effc
msgid "Rabbitmq and Redis"
msgstr ""

#: ../../admin/async/index.rst:11 bb5075406d8c42beaae205e3d3b50889
msgid "How to: Async Upload via API"
msgstr ""

#: ../../admin/async/index.rst:12 40e18d0c58cf441ea2390630b59c1799
msgid "In geonode is possible to upload resources via API in async/sync way."
msgstr ""

#: ../../admin/async/index.rst:14 31fe029139bc4278b7391a2ba489e853
msgid ""
"Here is available a full example of upload via API "
"https://github.com/GeoNode/geonode/blob/582d6efda74adb8042d1d897004bbf764e6e0285/geonode/upload/api/tests.py#L416"
msgstr ""

#: ../../admin/async/index.rst:18 2327009f33c84b05aaf324562cdd0253
msgid "Step 1"
msgstr ""

#: ../../admin/async/index.rst:20 cb1b816283084313991ff24b7121a81a
msgid ""
"Create a common client session, this is foundamental due the fact that "
"geonode will check the request session. For example with requests we will"
" do something like:"
msgstr ""

#: ../../admin/async/index.rst:29 2c84bf4c38944419ba5aa97b9311e4c6
msgid "Note: in Django this part is already managed"
msgstr ""

#: ../../admin/async/index.rst:32 f44542c1b06d439998ed0d6e906940c2
msgid "Step 2"
msgstr ""

#: ../../admin/async/index.rst:34 8e61ec31c0cc4a0795514017e668db93
msgid ""
"Call the `api/v2/uploads/upload` endpoint in PUT (is a form-data "
"endpoint) by specifing in files a dictionary with the names and the files"
" that we want to uploads and a data payload with the required "
"informations. For example:"
msgstr ""

#: ../../admin/async/index.rst:62 1e36cf69c6554d329255e7cb6f0300cc
msgid "Step 3"
msgstr ""

#: ../../admin/async/index.rst:64 6a13e9e36f95444d90cb87cf333b50b1
msgid ""
"Call in the final upload page in order to trigger the actual import. If "
"correclty set, Geoserver will manage the upload asyncronously."
msgstr ""

#: ../../admin/async/index.rst:74 b669473450e14113bb0280f44063080f
msgid "Step 4"
msgstr ""

#: ../../admin/async/index.rst:76 8549be6b03114a84b58c0bd71ef4ceb3
msgid ""
"The upload as been completed on GeoNode, we should check utill Geoserver "
"has complete his part. To do so, is enougth to call the detailed "
"information about the upload that we are performing"
msgstr ""

#: ../../admin/async/index.rst:83 090894e627424890ae40b0b369f1172f
msgid ""
"When the status is `PROCESSED` and the completion is `100%` we are able "
"to see the resource in geonode and geoserver"
msgstr ""

